import java.util.*;
class EgytianFractions
{
    public static void EgyptianFraction(int p,int q)//p is numerator,q is denominator
    {
        if(p<=1)//if no. is unique (1/k)
        {
            System.out.print("1/"+q);return;
        }
        int k=findLargest(p,q);//find largest 1/k fraction smaller than p/q
        System.out.print("1/"+k+" + ");//prints it
        int[] array=subtract(p,q,k);//c/d=p/q-1/k
        array=simplify(array[0],array[1]);//simplifies c/d
        EgyptianFraction(array[0],array[1]);//pass it on
    }

    public static void main(int p,int q)
    {
        int whole=p/q;//integer in mixed fraction
        p-=whole*q;//making sure p/q<1 for greedy algorithm
        if(whole>0)
            System.out.print(p+"/"+q+" = "+whole+" + ");
        else
            System.out.print(p+"/"+q+" = ");
        EgyptianFraction(p,q);//recursive function
    }

    public static int findLargest(double p,double q)//finds largest fraction smaller than input & returns its denominator
    {
        for(double i=2;i<q;i++)
            if(1/i<p/q)  
                return (int)i;       
        return 0;
    }

    public static int[] subtract(int p,int q,int k)
    {
        int[] fraction=new int[2];
        fraction[0]=p*k -q;
        fraction[1]=k*q;
        return fraction;
    }

    public static int[] simplify(int p,int q)
    {
        for(int i=2;i<q;i++)
            if((p%i==0)&&(q%i==0))
            {
                p/=i;q/=i;i--;
            }
        int[] fraction=new int[2];
        fraction[0]=p;fraction[1]=q;
        return fraction;
    }
}